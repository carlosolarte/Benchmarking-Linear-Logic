***(
  Syntax of Propositional Linear Logic
  author: Carlos Olarte
  
  This file contains the syntax of propositional
  linear logic formulas. We use QID (literals, e.g., 'a, 'b) to
  denote atomic propositions 
  
  Some representative literals are also defined as, e.g.,
  p,q,r,s,t,a,b with equations of the form eq p = 'p

  The grammar is as follows:
    
  F ::= A | A ^ | 1 | 0 | bot | top | F * F | F|F | F & F | F o F | F -o F

  Atoms have a positive bias (for focusing)

  We introduce the classical connectives (including, e.g., par) and
  also the intuitionistic ones (i.e.., -o)  In the classical system we
  introduce the needed equations to transform F -o G into F ^ | G

  Sets (separated by ;) and multisets (separated by ,) are defined in
  the module MSET-FORMULA. The empty set is emp and the empty multiset
  is empMS
***)

load meta-level-ext .

--- ===================
--- SYNTAX
--- ===================
fmod FORMULA is
    pr META-LEVEL-EXT .
    sort Formula .

    --- Atoms
    sort Atom .
    subsort Qid < Atom < Formula .
    op _^ : Atom -> Atom [ctor prec 10] .
    eq ( (A:Atom ^) ^ ) = A:Atom . --- double (atomic) negation

    --- Some representative atoms
    ops a b c p q s : -> Atom .
    eq a = 'a . eq b = 'b . eq c = 'c .
    eq p = 'p . eq q = 'q . eq s = 's .

    --- units
    op 1 : -> Formula [ctor] .
    op 0 : -> Formula [ctor] .
    op bot : -> Formula [ctor] .
    op top : -> Formula [ctor] .

    --- Connectives
    op _*_ : Formula Formula -> Formula [ctor assoc prec 25] . *** tensor
    op _|_ : Formula Formula -> Formula [ctor assoc prec 25] . *** par (for Classical LL)
    op _&_ : Formula Formula -> Formula [ctor assoc prec 30] . *** with
    op _o_ : Formula Formula -> Formula [ctor assoc prec 30] . *** oplus
    op _-o_ : Formula Formula -> Formula [prec 35] . *** implication for ILL
    op _o-o_ : Formula Formula -> Formula [prec 35] . *** biimplication for ILL

    --- Exponentials
    op !_ : Formula -> Formula [ctor prec 20] .
    op ?_ : Formula -> Formula [ctor prec 20] .

    ---------------------
    vars F F' G : Formula .
    var A : Atom .
    ---------------------

    --- Linear Inuitionistic Negation (just an equation )
    op ~_ : Formula -> Formula [ctor prec 10] .
    eq ~ F = F -o bot .
    
    --- Bi-implication as tensor of implication
    eq F o-o G = (F -o G) * (G -o F) .

    --- Classical negation
    op neg' : Formula -> Formula .
    eq neg'(A:Atom) = A:Atom ^ .
    eq neg'(1) = bot .
    eq neg'(0) = top .
    eq neg'(bot) = 1 .
    eq neg'(top) = 0 .
    eq neg'(F * G) = neg'(F) | neg'(G) .
    eq neg'(F | G) = neg'(F) * neg'(G) .
    eq neg'(F & G) = neg'(F) o neg'(G) .
    eq neg'(F o G) = neg'(F) & neg'(G) .
    eq neg'(F -o G) = F * neg'(G) .
    eq neg'( ! F ) = ?  neg'(F) .
    eq neg'( ? F ) = !  neg'(F) .

    --- Removing all the bangs from a formula
    op dropBangs : Formula -> Formula .
    eq dropBangs( ! F ) = dropBangs(F) .
    eq dropBangs( ? F ) = ? dropBangs(F) .
    eq dropBangs( F * G ) =  dropBangs(F) * dropBangs(G) .
    eq dropBangs( F | G ) =  dropBangs(F) | dropBangs(G) .
    eq dropBangs( F & G ) =  dropBangs(F) & dropBangs(G) .
    eq dropBangs( F o G ) =  dropBangs(F) o dropBangs(G) .
    eq dropBangs( F -o G ) =  dropBangs(F) -o dropBangs(G) .
    eq dropBangs(F) = F [owise] .

    --- Releasing on the Right
    op releaseR : Formula -> Bool .
    eq releaseR(A ^) = true .
    eq releaseR(bot) = true .
    eq releaseR(top) = true .
    eq releaseR(F | F') = true .
    eq releaseR(F & F') = true .
    eq releaseR(? F) = true .
    eq releaseR(F -o F') = true .
    eq releaseR(F) = false [owise] .

    --- Releasing on the Left
    op releaseL : Formula -> Bool .
    eq releaseL(F) = not releaseR(F) .
    
    --- Testing if a formula is an atom
    op isAtom : Formula -> Bool .
    eq isAtom(A) = true .
    eq isAtom(F) = false [owise] .

    --- Testing if a formula is a positive atom
    op isPosAtom : Formula -> Bool .
    eq isPosAtom(Q:Qid) = true .
    eq isPosAtom(F) = false [owise] .

    --- Testing if a formula is a negative atom
    op isNegAtom : Formula -> Bool .
    eq isNegAtom(Q:Qid ^) = true .
    eq isNegAtom(F) = false [owise] .

    --- Check if a formula is a tensor of atoms
    op isTensorAtom : Formula -> Bool [memo] .
    eq isTensorAtom(A:Atom) = true .
    eq isTensorAtom(A:Atom * F) = isTensorAtom(F) .
    eq isTensorAtom(F) = false [owise] .

    --- Testing if a formula is a (intuitionistic) linear implication
    op isLimp : Formula -> Bool .
    eq isLimp (F -o G) = true .
    eq isLimp (F) = false [owise] .

    --- Get the antedecedent of an implication
    op getAntecedent : Formula -> Formula .
    eq getAntecedent(F -o G) = F .
    
    --- Testing if the head of an implication is a tensor of atoms
    op isLimpAtom : Formula -> Bool .
    eq isLimpAtom(F -o G) = isTensorAtom(F) .
    eq isLimpAtom(F) = false [owise] .

    --- Check if a formula is 1 or an atom
    op isOneorAtom : Formula -> Bool .
    eq isOneorAtom(1) = true .
    eq isOneorAtom(A:Atom) = true .
    eq isOneorAtom(F) = false [owise] .

    --- To Latex
    op toTex : Formula -> String .
    eq toTex(Q:Qid) = string(Q:Qid) .
    eq toTex(Q:Qid ^) = string(Q:Qid) + "^{\\LLperp}" .
    eq toTex(1) = "\\LLone" .
    eq toTex(0) = "\\LLzero" .
    eq toTex(bot) = "\\LLbot" .
    eq toTex(top) = "\\LLtop" .
    eq toTex(F * G) = toTex(F) + " \\LLtensor " + toTex(G) .
    eq toTex(F | G) = toTex(F) + " \\LLpar " + toTex(G) .
    eq toTex(F & G) = toTex(F) + " \\LLwith " + toTex(G) .
    eq toTex(F o G) = toTex(F) + " \\LLplus " + toTex(G) .
    eq toTex(F -o G) = toTex(F) + " \\LLimp " + toTex(G) .
    eq toTex(! F) = " \\LLbang (" + toTex(F) + ")" .
    eq toTex(? F) = " \\LLquest " + toTex(F) .
endfm

--- ===================
--- SETS AND MULTISETS
--- OF FORMULAS
--- ===================

fmod MSET-FORMULA  is
    pr FORMULA .

    --- Sets
    sort SFormula .
    --- Multisets
    sort MSFormula .

    subsort Formula  < SFormula MSFormula .

    --- Empty set/mset
    op emp : -> SFormula .
    op empMS : -> MSFormula .

    --- Sets are build with ;
    op _;_ : SFormula SFormula -> SFormula [ctor assoc comm id: emp] .
    eq F:Formula ; F:Formula = F:Formula . *** idempotency

    --- Multisets are built with ,
    op _,_ : MSFormula MSFormula -> MSFormula [ctor assoc comm id: empMS] .

    -------------------
    var F : Formula .
    vars MS MS' : MSFormula .
    var S : SFormula .
    var A : Atom .
    -------------------
    
    --- In predicate
    op in : Formula MSFormula -> Bool .
    eq in(F, (F, MS)) = true .
    eq in(F, MS) = false [owise] .

    --- In predicate
    op in : Formula SFormula -> Bool .
    eq in(F, (F ; MS)) = true .
    eq in(F, MS) = false [owise] .

    --- atom in Set
    op atomInSet : SFormula -> Bool .
    eq atomInSet( (A ; S)) = true .
    eq atomInSet( S) = false [owise] .

    --- Subset predicate
    op subseteq : MSFormula MSFormula  -> Bool [memo] .
    eq subseteq( empMS ,MS') = true .
    eq subseteq( (F, MS) ,(F, MS')) = subseteq(MS, MS') .
    eq subseteq(MS, MS') = false [owise] .

    --- Multiset difference
    op minus : MSFormula MSFormula  -> MSFormula [memo] .
    eq minus( MS, empMS) = MS .
    eq minus( (F, MS) ,(F, MS')) = minus(MS, MS') .
    eq minus(MS, (F, MS')) = minus(MS, MS') [owise] .

    
    --- from a isTensorAtom formula to a multiset of atoms
    op tensorAtom2MS : Formula -> MSFormula [memo] .
    eq tensorAtom2MS(A:Atom) = A:Atom .
    eq tensorAtom2MS(A:Atom * F) = A:Atom , tensorAtom2MS(F) .
    eq tensorAtom2MS(F) = empMS [owise] .

    --- Negation of a multiset of formulas
    op neg : MSFormula -> Formula .
    eq neg (empMS) = empMS .
    eq neg ( (F:Formula , L:MSFormula)) = neg'(F:Formula) , neg(L:MSFormula) .

    --- Adding bangs to all the formulas
    op toBang : MSFormula -> MSFormula .
    eq toBang(empMS) = empMS .
    eq toBang(F:Formula, S:MSFormula) = !(F:Formula) , toBang(S:MSFormula) .

    --- to Latex
    op toTexS : SFormula -> String .
    op toTexMS : MSFormula -> String .
    eq toTexS(emp) = " \\LLempty " .
    eq toTexMS(empMS) = " \\LLempty " .
    eq toTexS(F ; S) = toTex(F) +
	( if S == emp then " " else " , " + toTexS(S) fi ) .
    eq toTexMS(F , MS) = toTex(F) +
	( if MS == empMS then " " else " , " + toTexMS(MS) fi )  .
endfm
    
eof
    
--- Some examples
--- red ! 'a o ! 'b * ! 'c .
--- red ! 'a o ! 'b * ! 'c == (! 'a) o ( (! 'b) * (! 'c)) . *** Checking precedence
--- red toTex(! 'a o ! 'b * ! 'c) .
--- red neg(! 'a o ! 'b * ! 'c) .
