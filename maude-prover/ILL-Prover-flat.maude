***(
  Focused system for Intuitionistic Linear Logic 
  author: Carlos Olarte

  ----------------------------------------------------------------
  NOTE:
  ----------------------------------------------------------------
  This file is just a variant of ILL-Prover.maude where proof terms
  are not generated (and hence, no LaTeX file can be produced)
  ----------------------------------------------------------------
  
  Sequents  have one of the following shape
  (1) unfocus: [ Gamma ] Delta |~ G
  The equational theory defined in the module ILL-EQ applies all the
  connectives belonging to the negative phase (in any order)
  Initial goals must use sequents of this shape (in order to guarantee
    that the derivations starts with a negative phase)
  ------------------------------------------------------------------
  (2) Focus on the right [ Gamma ] Delta ==> G
  G is decomposed until a negative formula is found and the sequent is
  reduced to a sequent of the shape (1)
  ------------------------------------------------------------------
  (3) Focus on the left [ Gamma ] Delta < F > <== G
  F is decomposed until a positive formula is found and the sequent is
  reduced to a sequent of the shape (1)
  ------------------------------------------------------------------
  (4) End of the positive phase [Gamma ] Delta |- G
  Sequents of this shape signals that the negative phase ended and a
  decision rule (on the right, on the linear or in the classical
  context) must be applied
  ------------------------------------------------------------------

  A configuration takes the form { n ; L ;PT } where L is a list of unproved
  sequents, PT is a proof term and "n" is the maximum number of times
  the copy rule (decision on the classical context)

  Initial goals take the form prove(S) where S is a sequent
  or prove(F) where F is a formula In these cases, the default limit
  LIMIT --unbounded-- is used (for the copy rule)
  Suitable alternatives allows for defining a different
  limit, eg prove(n, F) Using "unbounded" means that the
  prover is complete but proofs usually takes more time (and memory)

  Definition of the rules (positive phase) are in the module
  ILL-RL. Definitions for the negative phase are in the functional
  module ILL-EQ

  Module  ILL-PROVER offers facilities to build a proof tree using the
  meta-level and then, it generates LaTeX code

  For printing(generating latex code), the initial goal is solve(S)
  where S is a sequent (of the shape |~)
  ***)

    
load syntax .

--------------
--- Sequents
--------------
fmod ILL-SEQUENT-SYNTAX is
    
    sort Sequent .
    pr  MSET-FORMULA .

    --- Negative phase Sequent
    op [_]_|-_ : SFormula MSFormula Formula  -> Sequent [ctor prec 60] .
    --- Sequent needing the negative phase
    op [_]_|~_ : SFormula MSFormula Formula  -> Sequent [ctor prec 60] .
    --- Focused on the right
    op [_]_ ==> _ : SFormula MSFormula Formula  -> Sequent [ctor prec 60] .
    --- Focused on the right
    op [_]_ <_> <== _  : SFormula MSFormula Formula Formula  -> Sequent [ctor prec 60] .
    --- Terms used to describe proof terms (the phase of the proof is irrelevant)
    op seq : SFormula MSFormula Formula -> Sequent [ctor] .
    --- Error for the meta-level
    op error : -> Sequent [ctor] .

    --- List of sequents
    sort LSequent .
    subsort Sequent < LSequent .
    --- Empty list os sequents
    op none : -> LSequent .
    --- Building lists of sequents
    op _|_ : LSequent LSequent -> LSequent [ctor assoc id: none prec 70 frozen ] .
    
    ---------------------------------------
    var CC : SFormula .
    var L : MSFormula .
    vars F G : Formula .
    var LSq : LSequent .
    var Sq : Sequent .
    ---------------------------------------

    --- From sequents to seq-sequents
    op toSeq : Sequent -> Sequent .
    op toSeqL : LSequent -> LSequent .

    eq toSeq([CC] L |- F) = seq(CC, L, F) .
    eq toSeq([CC] L |~ F) = seq(CC, L, F) .
    eq toSeq([CC] L ==> F) = seq(CC, L, F) .
    eq toSeq([CC] L < G > <== F:Formula) = seq(CC, (L, G),  F) .
    
    eq toSeqL(none) = none .
    eq toSeqL(Sq | LSq) = toSeq(Sq) | toSeqL(LSq) .

    --- Transforming a list of |~ sequents into a list of |- sequents
    op readySeq : LSequent -> LSequent .
    op readySeq$ : Sequent -> Sequent .
    eq readySeq(none) = none .
    eq readySeq(Sq | LSq) = readySeq$(Sq) | readySeq(LSq) .
    eq readySeq$(([CC] L |~ F)) = ([CC] L |- F) .
    eq readySeq$(Sq) = Sq [owise] .
    
    --- TEX
    op toTex : Sequent -> String .
    op toTexL : LSequent -> String .

    eq toTex([CC] L |~ F) = "\\LLSec{" + toTexS(CC) + "}{" + toTexMS(L) + "}{" + toTex(F) + "}" .
    eq toTex([CC] L |- F) = "\\LLSec{" + toTexS(CC) + "}{" + toTexMS(L) + "}{" + toTex(F) + "}" .
    eq toTex([CC] L ==> F) = "\\LLSecR{" + toTexS(CC) + "}{" + toTexMS(L) + "}{" + toTex(F) + "}" .
    eq toTex([CC] L < F > <== G) = "\\LLSecL{" + toTexS(CC) + "}{" + toTexMS(L) + "}{" + toTex(F) + "}{" + toTex(G) + "}" .
    eq toTex(seq(CC, L, G)) = toTex([CC] L |- G) .

    eq toTexL(none) = " " .
    eq toTexL(Sq | LSq ) = toTex(Sq) + ( if  LSq == none then " " else " & " + toTexL(LSq) fi ) .
endfm

------------------------------------
--- Proof Terms and Derivation Trees
------------------------------------
fmod ILL-DERIVATION-TREE is
    pr ILL-SEQUENT-SYNTAX .

    -------------------------
    var Sq : Sequent .
    var LSq : LSequent .
    var Q : Qid .
    -------------------------
    --- Configurations
    sort Conf .
    --- The first argument is the limit for the use of the DecideC rule (copy from the classical context )
    op {_;_} : Bound LSequent -> Conf [ctor] .
    --- All the goals were proved
    op proved : -> Conf [ctor] .
    --- Error for the meta-level
    op error : -> Conf [ctor] .
endfm


-----------------------------------------
--- Equations defining the negative phase
-----------------------------------------
fmod ILL-EQ is
    pr ILL-SEQUENT-SYNTAX .

    -----------------------------------------------
    vars CC CC' : SFormula . --- classical contexts
    vars CL CL' : MSFormula . --- linear contexts
    vars F F' G G' : Formula .
    vars A A' : Atom .
    vars L L1 L2 : LSequent .
    var Sq : Sequent .
    -----------------------------------------------
    
    --- Rules of the negative phase
    eq [CC] CL , 1 |~ G = [CC] CL |~ G . --- ONEL
    eq [CC] CL, 0 |~ G = none . --- ZERO
    eq [CC] CL |~ top = none  . --- TOP
    eq [CC] CL |~ G -o G' = [CC] CL, G |~ G' . --- implR
    eq [CC] CL, F * F' |~ G = [CC] CL, F , F' |~ G . --- tensorL
    eq [CC] CL |~ G & G' = ([CC] CL |~ G)  | ([CC] CL |~ G') . --- withR
    eq [CC] CL, F o F' |~ G = ([CC] CL, F |~ G) | ([CC] CL, F' |~ G) . --- plusL
    eq [CC] CL, ! F |~ G = [CC ; F] CL |~ G . --- bangL
	
	--- some simplifications (due to ILL equivalence)
    eq [CC ; F & F'] CL |~ G =  [CC ; F ; F'] CL |~ G . --- !(F& F') == !F * ! F'
    eq [CC ; 0] CL |~ G =  none . --- !0 |-- 0
    eq [CC ; ! F] CL |~ G =  [CC ; F] CL |~ G . --- !!F == !F
    eq [CC ; 1] CL |~ G =  [CC] CL |~ G . --- !1 == 1
    ceq [CC ; F ; F -o F'] CL |~ G =  [CC ; F ; F -o F' ; F'] CL |~ G if (CC ; F ; F -o F') =/= (CC ; F ; F -o F' ; F') . --- modus-ponens classical context
endfm

-------------------------------------
--- Rules defining the positive phase
-------------------------------------
mod ILL-RL is
    pr  ILL-DERIVATION-TREE .

    -----------------------------------------------
    vars CC CC' : SFormula . *** classical contexts
    vars CL CL' CL1 CL2 : MSFormula . *** linear contexts
    vars F F' G G' : Formula .
    vars A A' : Atom .
    vars L L'  : LSequent .
    var Sq : Sequent .
    vars n m : Nat .
    var bnd : Bound .
    -----------------------------------------------
   

    --- Handling the negative phase (via metaReduce in the equational module)
    op negPhase : Sequent -> LSequent .
    eq negPhase(Sq) = readySeq(downTerm(redIn('ILL-EQ, upTerm(Sq)), error)) .
    

    --- Test if a sequent is provable by applying init
    op isInit : Sequent -> Bool [memo] .
    eq isInit( [CC] A |- A) = true .
    eq isInit([CC ; A] empMS |- A ) = true .
    ceq isInit([CC] CL |- F ) = true if isTensorAtom(F) and-then CL == tensorAtom2MS(F) .
    eq isInit(Sq) = false [owise] .


    --- Negative phase (The proof term is added only if the negative
    --- phase generated a different goal)
    crl [Rneg] : { bnd ; ([CC] CL |~ G)} => { bnd ; L}
	if L := negPhase([CC] CL |~ G)  .

      --- None
    rl [none] : { bnd ; none} => proved .

    --- One (No proof term is generated)
    rl [Rone] : { bnd ; ([CC] empMS ==> 1)} => proved .

    --- Init (No proof term is generated)
    rl [Rinit] : { bnd ; ([CC] A ==> A)} => proved .
    rl [RinitC] : { bnd ; ([CC ; A] empMS ==> A)} => proved .

    --- BOT
    rl [Rbot] : { bnd ; ([CC] empMS < bot > <== bot)} => proved .

    --- Tensor
    --- The tensor rule considers several cases to make more
    --- deterministic the splitting of the context Cases include when
    --- the formula takes the form F x G and F is either an atom or 1
    --- A more general approach is to use lazy splitting
    
    ---rl [Rtensor] : { bnd ;([CC] CL, CL' ==> G * G') ; Tr} =>
    --- { bnd ;([CC] CL ==> G) | ([CC] CL' ==> G') ; Tr . makePT(([CC] CL, CL' ==> G * G'),(([CC] CL ==> G) | ([CC] CL' ==> G')),'Rtensor) } .
    --- case tensor x 1
    rl [Rtensor] : { bnd ;([CC] CL ==> 1 * G')} =>
	{ bnd ;([CC] empMS ==> 1) | ([CC] CL ==> G')} .
    --- case tensor atom
    rl [Rtensor] : { bnd ;([CC] A, CL' ==> A * G')} =>
	{ bnd ;([CC] A ==> A) | ([CC] CL' ==> G')} .
    crl [Rtensor] : { bnd ;([CC ; A ] CL' ==> A * G')} =>
	{ bnd ;([CC ; A] empMS ==> A) | ([CC ; A] CL' ==> G') }
      if not in(A, CL') .
    crl [Rtensor] : { bnd ;([CC] CL, CL' ==> G * G')} =>
	{ bnd ;([CC] CL ==> G) | ([CC] CL' ==> G')}
	if not isOneorAtom(G) .
    
    
    --- Oplus
    rl [RplusA] : { bnd ; ([CC] CL ==> G o G')} =>
	{ bnd ; ([CC] CL ==> G)} .
    rl [RplusB] : { bnd ; ([CC] CL ==> G o G')} =>
	{ bnd ; ([CC] CL ==> G')} .

    --- Implication left
    --- Similar cases as in the tensor rule
    ---rl [RLimp] : { bnd ; ([CC] CL, CL' < F -o F' > <== G) ; Tr} =>
    --- { bnd ; ([CC] CL ==> F) | ([CC] CL' < F' > <== G) ; Tr . makePT(([CC] CL, CL' < F -o F' > <== G), (([CC] CL ==> F) | ([CC] CL' < F' > <== G)),'RLimp)} .

    crl [RLimp] : { bnd ; ([CC] CL, CL' < F -o F' > <== G)} =>
	{ bnd ; ([CC] CL ==> F) | ([CC] CL' < F' > <== G)}
      if  (not isTensorAtom(F)) or-else atomInSet(CC) .

    crl [RLimp] : { bnd ; ([CC] CL < F -o F' > <== G)} =>
	{ bnd ; ([CC] CL1 ==> F) | ([CC] CL2 < F' > <== G)}
      if  ((isTensorAtom(F)) and-then (not atomInSet(CC))) /\ CL1 := tensorAtom2MS(F) /\ subseteq(CL1, CL) /\ CL2 := minus(CL, CL1) .

      --- With L
    rl [RwithA] : { bnd ;([CC] CL < F & F' > <== G)} => { bnd ; ([CC] CL < F > <== G)} .
    rl [RwithB] : { bnd ;([CC] CL < F & F' > <== G)} => { bnd ; ([CC] CL < F' > <== G)} .

    --- BangL
    rl [Rbang] : { bnd ; ([CC] empMS ==> ! G)} => { bnd ; ([CC] empMS |~ G)} .
    
    --- Deciding 
    --- Linear context (No proof term is generated since the (flat) sequent remains the same)
    crl [RdecideL] : { bnd ; ([CC] CL, F |- G)} => { bnd ; ( [CC] CL < F > <== G)} if not isAtom(F) .

      --- Copy rule
    crl [RdecideC] : { bnd ; ([CC ; F] CL |- G)} =>
	{ dec(bnd) ; ( [CC ; F] CL < F > <== G)}
      if gteq(bnd, 1) and-then (not isAtom(F)) and-then (not isInit ([CC ; F] CL |- G)) and-then  ((not isLimp(F)) or-else (not isLimpAtom(F)) or-else atomInSet(CC) or-else subseteq(tensorAtom2MS(getAntecedent(F)),CL)) .

      --- Right formula (No proof term is generated since the (flat) sequent remains the same)
      --- !! This can be improved if CC has atoms. 
    crl [RdecideR] : { bnd ; ([CC] CL |- G)} => { bnd ; ([CC] CL ==> G)}
      if (not isTensorAtom(G)) or-else atomInSet(CC) or-else subseteq(tensorAtom2MS(G), CL) .

    --- Release (No proof term is generated since the (flat) sequent remains the same)
    crl [RreleaseL] : { bnd ; ([CC] CL < F > <== G)} => { bnd ; ( [CC] CL, F |~ G)} if releaseL(F) .
    crl [RreleaseR] : { bnd ; ([CC] CL ==> G)} => { bnd ; ( [CC] CL |~ G)} if releaseR(G) .
endm

------------------------------------
--- Facilities to proof ILL sequents
------------------------------------
    
mod  ILL-PROVER is
    pr ILL-RL .

    --- LIMIT for the copy rule
    --- Default value: unbounded
    op LIMIT : -> Bound .
    eq LIMIT = unbounded .

    ----------------------------
    var bnd : Bound .
    vars sq sq1 sq2 : Sequent .
    vars L LSq : LSequent .
    var Q : Qid .
    var RT : ResultTriple? .
    ----------------------------

    --- Don't prove twice the same sequent
    eq { bnd ; L1:LSequent | sq1 | L2:LSequent | sq1 | L3:LSequent} =
	{ bnd ; L1:LSequent | sq1 | L2:LSequent | L3:LSequent} .

    --- Test if a sequent is provable
    op provable? : Conf -> ResultTriple? [memo] .
    eq provable?({ bnd ; sq1}) = metaSearch( [['ILL-PROVER]], upTerm({ bnd ; sq1}), 'proved.Conf, nil, '*, unbounded, 0 ) .

    --- Dealing with several goals
    crl [step] : { bnd ; sq1 | sq2 | L} =>
	{bnd ; sq2 | L }
      if sq1 =/= sq2 /\ RT := provable? ({ bnd ; sq1}) /\ RT =/= failure .
      
    
      --- We assume that Sq is a sequent of the shape |~
    op prove : Sequent -> Conf .
    op prove : Bound Sequent -> Conf .
    eq prove(Sq:Sequent) = {LIMIT ; Sq:Sequent} .
    eq prove(bnd, Sq:Sequent) = {bnd ; Sq:Sequent} .
    op prove : Formula -> Conf .
    op prove : Bound Formula -> Conf .
    eq prove(F:Formula) = { LIMIT ; ([emp] empMS |~ F:Formula)} .
    eq prove(bnd, F:Formula) = { bnd ; ([emp] empMS |~ F:Formula)} .

    op solve : Bound Sequent -> Bool .
    op solve : Sequent -> Bool .
    ceq solve(bnd, sq) =  RT =/= failure
      if RT := provable? ({ bnd ; sq}) .
    eq solve(sq) = solve(unbounded, sq) .
    
endm
eof
--- Searching for a solution
search [1] prove(3, [emp] 'A |~ 'A * 1) =>* proved .
--- No limit on the copy rule
search [1] prove([emp] 'A |~ 'A * 1) =>* proved .
red prove(([emp] 'A |~ 'A * 1)) .
red provable?(prove(([emp] 'A |~ 'A * 1))) .
search [1] prove(4, ([emp]! ((! 'A -o 'B) & (! 'B -o 'A)),! ((! 'B -o 'C) & (! 'C -o 'B)) |~ (! 'A -o 'C) & (! 'C -o 'A))) =>* proved .
red solve(4, ([emp]! ((! 'A -o 'B) & (! 'B -o 'A)),! ((! 'B -o 'C) & (! 'C -o 'B)) |~ (! 'A -o 'C) & (! 'C -o 'A))) .
red so