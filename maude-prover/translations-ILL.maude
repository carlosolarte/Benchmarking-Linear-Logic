***(
  Translating Intuitionistic Logic sequents into ILL
  Author: Carlos Olarte
  See http://llwiki.ens-lyon.fr/mediawiki/index.php/Translations_of_intuitionistic_logic
  for further details on the encodings
  ***)
    
load ILL-Prover .
load PL-Theory .
    

--- Common facilities
mod TO-ILL is
    pr PL-SYNTAX .
    pr ILL-PROVER .

    vars F G : PLFormula .
    var S : SPLFormula .
    
    op proveIt : PLSeq -> String .
    op proveIt : Nat PLSeq -> String .
    eq proveIt(Sq:PLSeq) = "$" + solve(toILL(Sq:PLSeq)) + "$"  .
    eq proveIt(n:Nat , Sq:PLSeq) = "$" + solve(n:Nat , toILL(Sq:PLSeq)) + "$"  .
    op toILL : PLSeq -> Sequent .

    op toILL : SPLFormula -> MSFormula .
    eq toILL(nil) = empMS .
    eq toILL( (F , S)) = toILLF(F) , toILL(S) .

    op toILLF : PLFormula -> Formula .
    
endm
---------------------------
--- ENCODING: CALL-BY-NAME
---------------------------
mod CALL-BY-NAME  is
    inc TO-ILL .

    vars F G : PLFormula .
    var S : SPLFormula .
    
    eq toILLF(A) = 'A .
    eq toILLF(B) = 'B .
    eq toILLF(C) = 'C .
    eq toILLF(False) = 0 . 
    eq toILLF(True) = top .
    eq toILLF(F to G) = ! (toILLF(F)) -o  toILLF(G) .
    eq toILLF(F sim G) = toILLF( (F to G) land (G to F)) . --- Biimplication
    eq toILLF(F land G) = toILLF(F) & toILLF(G) .
    eq toILLF(F lor G) = (! toILLF(F)) o (! toILLF(G)) .
    eq toILLF(neg F) = toILLF(F to False) .

    eq toILL(S vdash F) = [emp] toBang(toILL(S)) |~ toILLF(F) .
endm
    

---------------------------
--- ENCODING: CALL-BY-VALUE
---------------------------
mod CALL-BY-VALUE  is
    inc TO-ILL .

    vars F G : PLFormula .
    var S : SPLFormula .
    
    eq toILLF(A) = ! 'A .
    eq toILLF(B) = ! 'B .
    eq toILLF(C) = ! 'C .
    eq toILLF(False) = 0 . 
    eq toILLF(True) = 1 .
    eq toILLF(F to G) = ! (toILLF(F) -o  toILLF(G)) .
    eq toILLF(F sim G) = toILLF( (F to G) land (G to F)) . --- Biimplication
    eq toILLF(F land G) = toILLF(F) * toILLF(G) .
    eq toILLF(F lor G) = toILLF(F) o toILLF(G) .
    eq toILLF(neg F) = toILLF(F to False) .

    eq toILL(S vdash F) = [emp] toILL(S) |~ toILLF(F) .
endm


------------------------------
--- ENCODING 0/1 (Lang-Miller)
------------------------------
mod 01-ENC  is
    inc TO-ILL .
    
    vars F G : PLFormula .
    var S : SPLFormula .
    
    op toILLF0 : PLFormula -> Formula .
    op toILLF1 : PLFormula -> Formula .
    eq toILLF1(A) = 'A .
    eq toILLF1(B) = 'B .
    eq toILLF1(C) = 'C .
    eq toILLF0(A) = 'A .
    eq toILLF0(B) = 'B .
    eq toILLF0(C) = 'C .

    eq toILLF1(False) = 0 .
    eq toILLF0(False) = 0 .
    
    eq toILLF1(True) = 1 .
    eq toILLF0(True) = top .
    
    
    eq toILLF1(F land G) = ! (toILLF1(F) & toILLF1(G) ) .
    eq toILLF0(F land G) = ( ! toILLF0(F)) & ( ! toILLF0(G) ) .

    eq toILLF1(F lor G) = (! toILLF1(F))  o (! toILLF1(G)) .
    eq toILLF0(F lor G) = ( ! toILLF0(F)) o ( ! toILLF0(G) ) .

    eq toILLF1(F to G) = ! ( (! toILLF0(F)) -o toILLF1(G)) .
    eq toILLF0(F to G) = ( ! toILLF1(F)) -o (! toILLF0(G) ) .

    eq toILLF0(F sim G) = toILLF0( (F to G) land (G to F)) . --- Biimplication
    eq toILLF1(F sim G) = toILLF1( (F to G) land (G to F)) . --- Biimplication
    eq toILLF0(neg F) = toILLF0(F to False) .
    eq toILLF1(neg F) = toILLF1(F to False) .

    op toILL0 : SPLFormula -> MSFormula .
    op toILL1 : SPLFormula -> MSFormula .
    eq toILL0(nil) = empMS .
    eq toILL1(nil) = empMS .
    eq toILL0( (F , S)) = toILLF0(F) , toILL0(S) .
    eq toILL1( (F , S)) = toILLF1(F) , toILL1(S) .

    eq toILL(S vdash F) = [emp] toBang(toILL0(S)) |~ toILLF1(F) .
endm

--- Translation proposed in the paper
--- This translation does not preserve provability!
mod MULTIPLICATIVE is
    inc TO-ILL .

    vars F G : PLFormula .
    var S : SPLFormula .
    
    op toILLF : PLFormula -> Formula .
    eq toILLF(A) = 'A .
    eq toILLF(B) = 'B .
    eq toILLF(C) = 'C .
    eq toILLF(False) = bot . 
    eq toILLF(True) = 1 .
    eq toILLF(F to G) = (toILLF(F)) -o  toILLF(G) .
    eq toILLF(F sim G) = toILLF( (F to G) land (G to F)) . --- Biimplication
    eq toILLF(F land G) = toILLF(F) * toILLF(G) .
    eq toILLF(F lor G) = (! toILLF(F)) o (! toILLF(G)) .
    eq toILLF(neg F) = toILLF(F to False) .

    eq toILL(S vdash F) = [emp] (toILL(S)) |~ toILLF(F) .
endm

eof

--- Examples of use 
--- select CALL-BY-NAME .
--- red proveIt( nil vdash A to A) .
--- red proveIt( A land B vdash A lor A) .
